// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game.SessionMsg.proto

#ifndef PROTOBUF_game_2eSessionMsg_2eproto__INCLUDED
#define PROTOBUF_game_2eSessionMsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace game {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_game_2eSessionMsg_2eproto();
void protobuf_AssignDesc_game_2eSessionMsg_2eproto();
void protobuf_ShutdownFile_game_2eSessionMsg_2eproto();

class SessionMsg;

// ===================================================================

class SessionMsg : public ::google::protobuf::Message {
 public:
  SessionMsg();
  virtual ~SessionMsg();

  SessionMsg(const SessionMsg& from);

  inline SessionMsg& operator=(const SessionMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionMsg& default_instance();

  void Swap(SessionMsg* other);

  // implements Message ----------------------------------------------

  SessionMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SessionMsg& from);
  void MergeFrom(const SessionMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional string passwd = 3;
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 3;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const char* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  inline void set_allocated_passwd(::std::string* passwd);

  // optional string msg = 4;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 4;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // optional int32 x = 5;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 5;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // optional int32 y = 6;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 6;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game.SessionMsg)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_passwd();
  inline void clear_has_passwd();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* account_;
  ::std::string* passwd_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 x_;
  ::std::string* msg_;
  ::google::protobuf::int32 y_;
  friend void  protobuf_AddDesc_game_2eSessionMsg_2eproto();
  friend void protobuf_AssignDesc_game_2eSessionMsg_2eproto();
  friend void protobuf_ShutdownFile_game_2eSessionMsg_2eproto();

  void InitAsDefaultInstance();
  static SessionMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// SessionMsg

// required int32 type = 1;
inline bool SessionMsg::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SessionMsg::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SessionMsg::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SessionMsg::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 SessionMsg::type() const {
  // @@protoc_insertion_point(field_get:game.SessionMsg.type)
  return type_;
}
inline void SessionMsg::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:game.SessionMsg.type)
}

// optional string account = 2;
inline bool SessionMsg::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SessionMsg::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SessionMsg::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SessionMsg::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& SessionMsg::account() const {
  // @@protoc_insertion_point(field_get:game.SessionMsg.account)
  return *account_;
}
inline void SessionMsg::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:game.SessionMsg.account)
}
inline void SessionMsg::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:game.SessionMsg.account)
}
inline void SessionMsg::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:game.SessionMsg.account)
}
inline ::std::string* SessionMsg::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:game.SessionMsg.account)
  return account_;
}
inline ::std::string* SessionMsg::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SessionMsg::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:game.SessionMsg.account)
}

// optional string passwd = 3;
inline bool SessionMsg::has_passwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SessionMsg::set_has_passwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SessionMsg::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SessionMsg::clear_passwd() {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_->clear();
  }
  clear_has_passwd();
}
inline const ::std::string& SessionMsg::passwd() const {
  // @@protoc_insertion_point(field_get:game.SessionMsg.passwd)
  return *passwd_;
}
inline void SessionMsg::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set:game.SessionMsg.passwd)
}
inline void SessionMsg::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:game.SessionMsg.passwd)
}
inline void SessionMsg::set_passwd(const char* value, size_t size) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:game.SessionMsg.passwd)
}
inline ::std::string* SessionMsg::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:game.SessionMsg.passwd)
  return passwd_;
}
inline ::std::string* SessionMsg::release_passwd() {
  clear_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SessionMsg::set_allocated_passwd(::std::string* passwd) {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passwd_;
  }
  if (passwd) {
    set_has_passwd();
    passwd_ = passwd;
  } else {
    clear_has_passwd();
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:game.SessionMsg.passwd)
}

// optional string msg = 4;
inline bool SessionMsg::has_msg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SessionMsg::set_has_msg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SessionMsg::clear_has_msg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SessionMsg::clear_msg() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& SessionMsg::msg() const {
  // @@protoc_insertion_point(field_get:game.SessionMsg.msg)
  return *msg_;
}
inline void SessionMsg::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set:game.SessionMsg.msg)
}
inline void SessionMsg::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:game.SessionMsg.msg)
}
inline void SessionMsg::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:game.SessionMsg.msg)
}
inline ::std::string* SessionMsg::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:game.SessionMsg.msg)
  return msg_;
}
inline ::std::string* SessionMsg::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SessionMsg::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:game.SessionMsg.msg)
}

// optional int32 x = 5;
inline bool SessionMsg::has_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SessionMsg::set_has_x() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SessionMsg::clear_has_x() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SessionMsg::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 SessionMsg::x() const {
  // @@protoc_insertion_point(field_get:game.SessionMsg.x)
  return x_;
}
inline void SessionMsg::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:game.SessionMsg.x)
}

// optional int32 y = 6;
inline bool SessionMsg::has_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SessionMsg::set_has_y() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SessionMsg::clear_has_y() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SessionMsg::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 SessionMsg::y() const {
  // @@protoc_insertion_point(field_get:game.SessionMsg.y)
  return y_;
}
inline void SessionMsg::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:game.SessionMsg.y)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_game_2eSessionMsg_2eproto__INCLUDED
